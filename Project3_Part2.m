
%Full machine precision to calculate 10^-8
format long
%These are the A B C & D constant values for top and bottom splines.
ab=[1.52000000000000	1.42000000000000	1.30000000000000	1.21000000000000	1.13000000000000	1.01000000000000	0.910000000000000	0.770000000000000	0.680000000000000	0.570000000000000	0.510000000000000	0.440000000000000	0.410000000000000	0.460000000000000	0.530000000000000	0.730000000000000	0.930000000000000	1.06000000000000	1.14000000000000	1.21000000000000	1.22000000000000	1.21000000000000	1.13000000000000	1.05000000000000	0.980000000000000];
at=[1.52000000000000	1.74000000000000	1.92000000000000	2.03000000000000	2.15000000000000	2.29000000000000	2.41000000000000	2.62000000000000	2.82000000000000	3.08000000000000	3.29000000000000	3.61000000000000	3.80000000000000	4.01000000000000	4.05000000000000	4.08000000000000	4.02000000000000	3.93000000000000	3.80000000000000	3.57000000000000	3.24000000000000	2.86000000000000	2.41000000000000	1.82000000000000	0.980000000000000];
bb=[-1.25345315665039	-1.19309368669921	-0.826761964040544	-0.855919549567170	-0.399227697810816	-0.399700557838677	-0.211988530467038	-0.160941965450517	-0.117375961225268	-0.0647208373738098	-0.0598566388002092	-0.0200066320578203	0.00521008910122171	0.0139237750538400	0.0472360383070237	0.0413365962401524	0.0503948198310766	0.0346921100615840	0.0390867889128710	0.00660390676934054	0.00768270368406207	-0.0418493661656918	-0.0357233394152967	-0.0603370733817641];
bt=[1.94854127697427	1.10291744605146	1.18860838202746	0.705270861040692	0.462099805517329	0.594656791715577	0.317976758041641	0.422268055526007	0.268136085648859	0.278654260248838	0.185315627745124	0.160606589985535	0.113550242338623	0.0415928160824931	0.0463437618496672	-0.0363883669735446	-0.0213642605306402	-0.0769697909838789	-0.0744759964198004	-0.110899824396063	-0.119214078332065	-0.145207538598024	-0.165357046892632	-0.200092937412302];
cb=[0	0.129493374389715	-0.466176147802973	2.85140139661954	-0.151996619795513	0.531127906567425	0.0399772747760748	0.0650418367226602	0.0246600014216936	0.00735074666676404	0.0180296136151628	0.00191875042393975	0.00219883213864224	0.00950896288700121	-0.000864545196555033	0.00506183790255874	-0.00159934820041306	0.00128220060948054	-0.00755199185368123	0.00633928068255578	-0.0144670335599527	0.00416274169290983	-0.0236079218251476	0.00250467506053854	0];
ct=[0	0.129493374389715	-0.466176147802973	2.85140139661954	-0.151996619795513	0.531127906567425	0.0399772747760748	0.0650418367226602	0.0246600014216936	0.00735074666676404	0.0180296136151628	0.00191875042393975	0.00219883213864224	0.00950896288700121	-0.000864545196555033	0.00506183790255874	-0.00159934820041306	0.00128220060948054	-0.00755199185368123	0.00633928068255578	-0.0144670335599527	0.00416274169290983	-0.0236079218251476	0.00250467506053854	0];
db=[0.539555726623812	-1.98556507397563	9.21549317895142	-7.70102055491039	0.711588048294728	-0.419786864778932	0.0103146345459199	-0.0184391942013546	-0.00501717529128392	0.00309532375315907	-0.00253315458981495	5.07394410692916e-05	0.000879678790416242	-0.00141714591305413	0.000509139441504620	-0.000579737693905291	0.000359743921335032	-0.00111542834130830	0.00217390806513881	-0.00383173374631832	0.00374091872547441	-0.00578555489959530	0.00617319075311731	-0.000695743072371815];
dt=[4.25278702691978	-10.9732406003239	7.86202686510325	1.65571531981304	-1.22122299370847	1.34628177880160	-0.286514372932241	0.149838476194126	-0.0326591922066779	0.0271829029967329	-0.00653316391667437	0.00313019294606682	0.00204889370723180	-0.00545664337016815	0.00861686278796122	-0.00870718847717821	0.00615242087403659	-0.00278358859044935	0.00147253015851784	-0.000742854834955393	0.000425569247639503	-0.000112982146372808	-0.000119101954238373	0.000364635406319500];
%Top and bottom X spline boundaries are listed to compare with, allowing
%the correct cubic spline equation to be identified to find the Y value
%for each equidistant X value.
xsplineTOP=[0.400000000000000	0.510000000000000	0.690000000000000	0.860000000000000	1.04000000000000	1.34000000000000	1.58000000000000	2.15000000000000	2.75000000000000	3.72000000000000	4.58000000000000	6.40000000000000	7.94000000000000	10.2500000000000	12.1700000000000	13.9200000000000	15.5300000000000	17.2500000000000	18.8900000000000	21.4000000000000	24.2600000000000	27.1300000000000	30.0800000000000	33.4100000000000	37.3800000000000];
xsplineBOT=[0.400000000000000	0.480000000000000	0.580000000000000	0.700000000000000	0.830000000000000	1.15000000000000	1.54000000000000	2.35000000000000	3.08000000000000	4.23000000000000	5.38000000000000	7.50000000000000	9.34000000000000	12.1100000000000	14.5500000000000	18.4300000000000	22.2600000000000	24.9300000000000	27.5700000000000	29.7000000000000	31.5100000000000	33.1700000000000	34.7700000000000	36.1800000000000	37.3800000000000];


%finding dx for N amount of Nodes.
%Error is declared as greater than 10^-8. It will double the nodes until error less than 10^-8
%is achieved.
ERR = 1;
AreaOld=0;
n=2;

while  ERR>10^-8
%listed the maximum and minimum X values from the airfoil, dividing by N-1
%to find width between nodes.
x1=0.4;
xn=37.38;
dx=(xn-x1)/(n-1);

%N number of Equidistant Xvalues are created based on number of nodes and the dx.
xval=[];
for i=1:n
    xval(i)=x1+(dx)*(i-1);
end
%This results in xval being an array of our equidistant points.



%These loops compares each equidistant 'xval' to the upper bounds of each
%spline equation. When the X value exceeds the upper bound of cubic equation
%'R', it returns to previous cubic equation, 'R-1', to calculate the Y
%values for a 'xval'. This finds the top and bottom function Y values, 'Yval' for each 'Xval' 
yvalTOP=[];
for i=1:n
    key=0;
    k=2;
    while key==0 
    if xval(i)<=xsplineTOP(k)
        yvalTOP(i)=(at(k-1))+((bt(k-1))*(xval(i)-xsplineTOP(k-1)))+((ct(k-1))*(xval(i)-xsplineTOP(k-1))^2)+((dt(k-1))*(xval(i)-xsplineTOP(k-1))^3);
        key=1;
    end
    k=k+1;
    end
end


yvalBOT=[];
for i=1:n
    key=0;
    k=2;
    while key==0 
    if xval(i)<=xsplineBOT(k)
        yvalBOT(i)=(ab(k-1))+((bb(k-1))*(xval(i)-xsplineBOT(k-1)))+((cb(k-1))*(xval(i)-xsplineBOT(k-1))^2)+((db(k-1))*(xval(i)-xsplineBOT(k-1))^3);
        key=1;
    end
    k=k+1;
    end
end

%Once the top and bottom 'Yvals' are calculated for each 'xval', the upper
%and lower areas are calculated using the trapezoidal rule.

%It initially takes the first yval, adds double of yval(2) to yval(n-1) and
%then adds the final 'yval', yval(n)
Atop=yvalTOP(1);
Abot=yvalBOT(1);
for i=2:(n-1)
    Atop=Atop+(2*yvalTOP(i));
    Abot=Abot+(2*yvalBOT(i));
end
Atop=Atop+yvalTOP(n);
Abot=Abot+yvalBOT(n);
%The summations are then multiplied by 1/2 dx to get a total top and bottom
%area.
Atop=Atop*dx*.5;
Abot=Abot*dx*.5;
%The areas are subtracted to achieve the areas between the functions.
AreaNew=Atop-Abot;

%The error is now checked with 'AreaNew' and 'AreaOld', where 'AreaNew' has
%twice as many nodes than 'AreaOld'
ERR=abs((AreaNew-AreaOld)/AreaNew);
AreaOld=AreaNew;
n=2*n;
end
%Once the error of 10^-8 is achieved, the loop stops and fin
disp(AreaNew)
disp(n)
disp(ERR)
